package chap09.sec01.exam01_nestedclass_object;

public class A {
	
	int field1;
	
	A() {
		System.out.println("A객체가 생성됨");
		
		B b = new B();
		b.field1 = 3;
		b.method1();
		
		C c = new C();
		c.field1 = 2;
		c.method1();
		
		C.field2 = 3;
		C.method2();
	}
	
	/*
	 * ====================================================================
	 * 중첩 클래스, nested class
	 * ====================================================================
	 * 중첩 클래스란 클래스 내부에 선언한 클래스를 말한다.
	 * 중첩 클래스는 어떤 클래스가 한 특정 클래스와의 관계만을 가질 때 활용한다. (여러 클래스와 관계를 맺는다면 독립된 클래스로 작성하는 것이 더 유리)
	 * 중첩 클래스를 사용하면 두 클래스의 멤버들을 서로 쉽게 접근할 수 있고,
	 * 외부에는 불필요한 관계 클래스를 감출 수 있다는 장점이 있다.
	 * 
	 * 중첩 클래스는 선언되는 위치에 따라 두 가지로 분류된다.
	 * 1. 클래스의 멤버로 선언되는 '멤버 클래스'
	 * 2. 클래스의 메서드 내부에서 선언되는 '로컬 클래스'
	 * 
	 * 두 경우 모두 한 클래스의 내부에서 선언되기 때문에 중첩 클래스이지만,
	 * 클래스의 멤버로서 선언되는 클래스인 멤버 클래스는 바깥 클래스나 바깥 클래스의 객체가 사용중이라면 언제든지 재사용이 가능하지만,
	 * 클래스의 메서드 내부에서 선언되는 클래스인 로컬 클래스는 메서드 실행 시에만 사용되고, 메서드가 종료되면 없어진다.
	 * */
	
	/*
	 * ====================================================================
	 * 멤버 클래스
	 * ====================================================================
	 * 멤버 클래스는 다시 바깥 클래스의 객체가 있어야만 접근이 가능한 '인스턴스 멤버 클래스'와
	 * 바깥 클래스의 객체 없이도 접근이 가능한 '정적 멤버 클래스'로 나뉜다.
	 * 정적 멤버 클래스의 선언부 앞에는 static을 붙여 구분한다.
	 * */
	
	/*
	 * ====================================================================
	 * 인스턴스 멤버 클래스
	 * ====================================================================
	 * 인스턴스 멤버 클래스에는 바깥 클래스의 객체가 생성되어야만 접근할 수 있다.
	 * 따라서 인스턴스 멤버 클래스에는 정적 멤버(정적 필드, 정적 메서드)를 선언할 수 없다. 
	 * */
	class B {
		int field1;
		// static int field2;
		
		B() {
			System.out.println("B객체가 생성됨");
		}
		
		void method1() {};
		// static void method2() {};
	}
	
	
	/*
	 * ====================================================================
	 * 정적 멤버 클래스
	 * ====================================================================
	 * 정적 멤버 클래스에는 바깥 클래스의 객체 없이도 접근이 가능하다.
	 * 따라서 정적 멤버 클래스에는 정적 멤버를 선언할 수 있다.
	 * 
	 * 정적 멤버 클래스는 중첩 클래스지만 독립된 클래스와 비슷한 지위를 갖는다.
	 * 1. 바깥 클래스의 객체 유무와 관계 없이 객체 생성이 가능하다.
	 * 2. 정적 멤버를 가질 수 있다.
	 * => 바깥 클래스에 종속되는 정도가 매우 낮다. 하지만 정적 멤버 클래스의 타입은 [바깥 클래스].[정적 멤버 클래스]로
	 * => 객체 생성 시 바깥 클래스의 사용이 전제 되어야 한다는 점에서 완전한 독립 클래스라 보기 어렵다.
	 * */
	static class C {
		int field1;
		static int field2;
		
		C() {
			System.out.println("C객체가 생성됨");
		}
		
		void method1() {};
		static void method2() {};
	}
	
	/*
	 * ====================================================================
	 * 로컬 클래스
	 * ====================================================================
	 * 로컬 클래스는 메서드 실행 블럭 내부에서 선언된 클래스로 해당 메서드 내부에서만 접근이 가능하다.
	 * 메서드 내부에서만 접근이 가능하기 때문에 접근 제한자를 붙일 필요가 없고, 따라서 접근 제한자와 static을 붙일 수 없도록 되어있다.
	 * 또한 메서드가 실행 되어야만 접근이 가능하기 때문에 정적 멤버 또한 가질 수 없다.
	 * 
	 * 로컬 클래스는 주로 비동기 처리(메인 스레드와 독립된 스레드에서 서로 다른 작업을 병행시키는 방법)를 수행할 때 사용한다.
	 * => 메서드 내부에 스레드 클래스를 선언하고, 메서드 내부에서 해당 스레드 객체를 얻어 작업하는 방식
	 * */
	void method1() {
		class D {
			int field1;
			//static int field2;
			
			D() {
				System.out.println("D객체가 생성됨");
			}
			
			void method1() {};
			// static method2() {};
		}
		
		D d = new D();
		d.field1 = 3;
		d.method1();
	}
}
