package chap08.sec02.exam01_interface_declaration;

/*
 * =============================================================
 * 인터페이스, interface
 * =============================================================
 * 인터페이스는 객체의 사용 방법을 정의한 타입이다.
 * 인터페이스는 개발 코드와 객체가 서로 통신하는 접점이다.
 * => 개발 코드는 객체의 내부 구조를 알 필요없이 인터페이스의 메서드만 알고 있으면 된다.
 * 인터페이스는 객체의 교환성을 높여 주어 다형성을 형성하는데 중요한 역할을 한다.
 * => 개발 코드의 수정없이 인터페이스를 구현하는 객체만 교환하면 다른 결과를 얻을 수 있다.
 * 
 * 일반적인 클래스와 달리 인터페이스는 '상수'와 '메서드'만을 구성 멤버로 가진다.
 * 인터페이스는 아주 기본적인 설계도의 개념, 뼈대 정도를 의미하므로 그 자체로 객체를 갖는 것은 의미가 없다.
 * 따라서 인터페이스는 '생성자'가 없다.
 * */
public interface RemoteControl {

	/*
	 * =============================================================
	 * 상수
	 * =============================================================
	 * 인터페이스는 런타임 시 데이터를 저장할 수 있는 필드를 선언할 수 없다.
	 * 상수는 인터페이스에 고정된 값으로 런타임 시 데이터를 바꿀 수 없다.
	 * 따라서 상수를 선언할 때 반드시 값을 초기화 해야 한다.
	 * => 클래스와 달리 static 블록을 통한 상수의 초기화가 불가능하다.
	 * 
	 * 클래스에서 상수를 선언할 때에는 다른 필드와 구분하기 위해 public static final을 명시하지만
	 * 인터페이스에서는 상수만 선언할 수 있기 때문에 굳이 명시하지 않아도 컴파일 시에 JVM이 자동으로 추가한다.
	 * */
	public static final int MAX_VOLUME = 10;
	int MIN_VOLUME = 0;
	
	/*
	 * =============================================================
	 * 추상 메서드
	 * =============================================================
	 * 인터페이스는 객체 설계도(또는 사용 설명서)이기 때문에 대부분의 메서드는 추상 메서드로 선언하여 사용한다.
	 * 따라서 인터페이스를 구현하는 객체에서 인터페이스에 명시된 추상 메서드를 오버라이딩하여 사용하는 것이 일반적이다.
	 * 그렇기 때문에 인터페이스의 메서드에 public abstract를 굳이 명시하지 않아도 컴파일 시에 JVM이 자동으로 추가한다.
	 * */
	void turnOn();
	void turnOff();
	void setVolume(int volume);
	
	/*
	 * =============================================================
	 * 디폴트 메서드
	 * =============================================================
	 * 
	 * */
	default void setMute(boolean mute) {
		if(mute) {
			System.out.println("무음 처리합니다.");
		}
		else {
			System.out.println("무음 해제합니다.");
		}
	}
	
	/*
	 * =============================================================
	 * 정적 메서드
	 * =============================================================
	 * 
	 * */
	static void changeBattery() {
		System.out.println("건전지를 교환합니다.");
	}
}
